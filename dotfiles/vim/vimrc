set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" our plugins
Plugin 'gmarik/Vundle.vim'       " vundle
Plugin 'tpope/vim-fugitive'      " git wrapper
Plugin 'vim-scripts/tComment' " comment the code
Plugin 'mattn/webapi-vim' " for Gist nad other api
Plugin 'mattn/gist-vim' " Gist
Plugin 'vim-ruby/vim-ruby' " Ruby
Plugin 'scrooloose/nerdtree' " Tree view
Plugin 'tpope/vim-markdown' " markdown
Plugin 'tpope/vim-rails' " rails
Plugin 'tpope/vim-git' " git
Plugin 'scrooloose/syntastic' " For syntax errors
Plugin 'junegunn/vim-easy-align' " Ez align
Plugin 'itchyny/lightline.vim' " For bottom vim status bar
Plugin 'fatih/vim-go' " Golang
Plugin 'ekalinin/Dockerfile.vim' " Dockerfile
Plugin 'tpope/vim-endwise' " Auto end
Plugin 'bronson/vim-trailing-whitespace' " Fix whitespace
Plugin 'chase/vim-ansible-yaml' " ansible syntax
Plugin 'majutsushi/tagbar'
Plugin 'Raimondi/delimitMate'
Plugin 'rhysd/vim-crystal' " crystal lang
Plugin 'elzr/vim-json'
Plugin 'airblade/vim-gitgutter'

" colorschemes
Plugin 'chriskempson/tomorrow-theme' , {'rtp': '/vim/'}
Plugin 'gosukiwi/vim-atom-dark'
call vundle#end()

set nocompatible
syntax on
filetype off
filetype plugin indent on
silent! colorscheme atom-dark-256

" Basics
let mapleader=" "
set mouse=a
hi Visual term=reverse cterm=reverse guibg=Grey
set clipboard=unnamedplus
set ruler                     " Show the line number and column in the status bar"
set showmatch                 " Highlight matching braces"
set laststatus=2              " Always show the statusline
set encoding=utf-8            " Necessary to show Unicode glyphs
set noeb vb t_vb=             " Disable sound
set nojoinspaces              " No double space when joining lines
set whichwrap=b,s,[,],<,>,h,l " Allow cursor to wrap between lines
set showcmd
set shortmess+=I              " Hide Vim startup message
set autoread
set backspace=2
autocmd BufEnter * call system("tmux rename-window " . expand("%:t"))
set title
set backup
set writebackup
autocmd BufEnter * lcd %:p:h  " change the directory to where the edited file.
set updatetime=250

" add keywords
autocmd BufRead,BufNewFile * syntax keyword Todo TODO XXX FIXME

" reload if change .vimrc
autocmd! BufWritePost .vimrc source ~/.vimrc

" Layout stuff
set textwidth=80
set scrolloff=5 " Scroll distance at the top / bottom
set wildmenu

" Highlight extra whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" File types
au BufRead,BufNewFile,BufWrite,BufEnter *.json setf javascript
au BufRead,BufNewFile,BufWrite,BufEnter {Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,Capfile,Guardfile,config.ru,.caprc,.irbrc,*.rake} setf ruby
au BufRead,BufNewFile,BufWrite,BufEnter .zsh/* setf zsh
au Filetype vim let b:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'", '`':'`'}

" Indentation
set smartindent
set autoindent
set noet ci pi sts=0 sw=8 ts=8 " Tabs, shown as 8 spaces
autocmd Filetype {ruby,yaml,html,crystal} setlocal et sw=2 sts=2 " 2 spaces for Ruby, YAML, Html
autocmd BufNewFile,BufRead *.html.erb setlocal et sw=2 sts=2 " 2 spaces for erb

" Search
set hlsearch   " Highlight results
set incsearch  " Start showing results as you type
set smartcase  " Be smart about case sensitivity when searching

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" swap files
set backupdir=~/.vim/.tmp//,~/tmp/.vim//
set directory=~/.vim/.tmp//,~/tmp/.vim//
set undodir=~/.vim/.tmp//,~/tmp/.vim//

" speed up syntax highlighting
set nocursorcolumn
set nocursorline
syntax sync minlines=256
set synmaxcol=300
set re=1

set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" remember last line
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Copy & Paste
vmap <Leader>y "+y
vmap <Leader>Y "+y
vmap <Leader>d "+d
vmap <Leader>D "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" Quit current window
nnoremap <silent> <Leader>q :q<cr>

" Quit without update
nnoremap <silent> <Leader>qq :q!<cr>

" Update and Quit current window
nnoremap <silent> <Leader>x :x<cr>

" Abort all
nnoremap <silent> <Leader>Q :qa!<cr>

nnoremap <Leader>w :w<CR>
nnoremap <Leader>wq :wq<CR>

map q: :q

cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev WQ wq

" <del> always deletes without a side effect
noremap <del> "_x

" Command to write as root if we dont' have permission
cmap w!! %!sudo tee > /dev/null %

" -----------------------------
" Plugins Settings
" ----------------------------
" Easy align
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Whitespace
nmap <Leader>ws :FixWhitespace<CR>
vmap <Leader>ws :FixWhitespace<CR>

" Tagbar
nmap <silent> <F8> :TagbarToggle<CR>

" delimitMate
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:delimitMate_smart_quotes = 1
let g:delimitMate_expand_inside_quotes = 0
let g:delimitMate_smart_matchpairs = '^\%(\w\|\$\)'

" NERDTree config
let NERDTreeShowHidden=1
map <silent> <F7> :NERDTreeToggle<CR>

" lightline config
let g:lightline = {
      			\ 'colorscheme': 'Tomorrow_Night_Eighties',
      			\ 'active': {
      			\   'left': [ [ 'mode', 'paste' ],
      			\             [ 'fugitive', 'filename' ] ],
			\   'right': [ [ 'syntastic', 'lineinfo'  ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype'  ]  ]
      			\ },
      			\ 'component_function': {
      			\   'fugitive': 'MyFugitive',
      			\   'readonly': 'MyReadonly',
      			\   'modified': 'MyModified',
      			\   'filename': 'MyFilename'
      			\ },
               		\ 'component_expand': {
               		\   'syntastic': 'SyntasticStatuslineFlag',
               		\ },
               		\ 'component_type': {
               		\   'syntastic': 'error',
               		\ },
      			\ 'separator': { 'left': '', 'right': '' },
      			\ 'subseparator': { 'left': '', 'right': '' }
      			\ }

function! MyModified()
	if &filetype == "help"
	  	return ""
	elseif &modified
	  	return "+"
	elseif &modifiable
	  	return ""
	else
	  	return ""
	endif
endfunction

function! MyReadonly()
	if &filetype == "help"
	  	return ""
	elseif &readonly
	  	return ""
	else
	  	return ""
	endif
endfunction

function! MyFugitive()
	if exists("*fugitive#head")
	  	let _ = fugitive#head()
	  	return strlen(_) ? ' '._ : ''
	endif
	return ''
endfunction

function! MyFilename()
	return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
	  	        	\ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
	  	        	\ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

augroup AutoSyntastic
  	autocmd!
  	autocmd BufWritePost * call s:syntastic()
augroup END
function! s:syntastic()
  	SyntasticCheck
  	call lightline#update()
endfunction

" syntastic
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = "✗"
let g:syntastic_style_error_symbol = "✗"
let g:syntastic_warning_symbol = "→"
let g:syntastic_style_warning_symbol = "→"

" Ruby - Rubocop
let g:syntastic_ruby_checkers = ['rubocop']

" vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

let g:go_fmt_command = "goimports"
let g:go_bin_path = expand("~/.gotools")

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)

au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gd <Plug>(go-doc)

au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)

au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

au FileType go nmap <Leader>e <Plug>(go-rename)

" ==================== Vim-json ====================
let g:vim_json_syntax_conceal = 0

" turkish.vim
if filereadable(glob("~/.glove/dotfiles/vim/turkish.vim"))
	source ~/.glove/dotfiles/vim/turkish.vim
endif

" vimrc.local
if filereadable(glob("~/.glove/dotfiles/local/vimrc.local"))
	source ~/.glove/dotfiles/local/vimrc.local
endif
